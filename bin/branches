#!/bin/bash

USAGE=$(cat <<EOFUSAGE
usage: branches [options] [branch]
options:
  -b, --branch BRANCH  Only compare to branch
  -r, --remote         Only print remotes
  -l, --local          Only print local
  -o, --origin ORIGIN  Run against origin
  -v, --verbose        Print short commit diff for branches
                       (bails when > 10 and -b not supplied)
  -h, --help           Show this message
EOFUSAGE
)

doCompare() {
  local branch="$1"

  if ! [[ $branch =~ remotes/$OPT_ORIGIN/HEAD ]]; then
    local shortName="${branch/remotes\/$OPT_ORIGIN\//}"

    read ahead behind < <(git rev-list --left-right --count $branch...$OPT_BRANCH 2>/dev/null)
    local msg="even"
    if [[ -n "$ahead" && "$ahead" -ne 0 ]] || [[ -n "$behind" && "$behind" -ne 0 ]]; then
      if [ "$TERM" != dumb ]; then
        msg=$'\e[0;91m-'"$behind"$'\e[0m/\e[92m'"+$ahead"$'\e[0m'
      else
        msg="-$behind/+$ahead"
      fi
    fi

    local colour=
    local reset=
    if [ -n "${onlyLocal[$shortName]}" ]; then
      if [ "$TERM" != dumb ]; then
        colour=$'\e[1;36m'
        reset=$'\e[0;0m'
      fi
    elif [ -n "${onlyRemote[$shortName]}" ]; then
      if [ "$TERM" != dumb ]; then
        colour=$'\e[0;33m'
        reset=$'\e[0;0m'
      fi
    elif [[ $branch =~ remotes\/$OPT_ORIGIN\/ ]]; then
      return
    fi

    if [ "$shortName" == "$thisBranch" ] || [[ "$thisBranch" == "HEAD" && "$shortName" =~ no\ branch ]]; then
      printf "> "
    else
      printf "  "
    fi
    printf "$colour%-$((longestName + 2))s%s${reset}\n" "$shortName" "$msg"

    if [ -n "$OPT_VERBOSE" ] && [ "$msg" != "even" ]; then
      if [ $((behind + ahead)) -le 10 ]; then
        git log --pretty=format:'%h %ad | %s' --date=short $branch...$OPT_BRANCH | sed 's/^/    /'
        printf "\n"
      fi
      printf "\n"
    fi
  fi
}

OPT_BRANCH=$(git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/@@')
if [ -z "$OPT_BRANCH" ]; then
  echo trying to set main branch
  git remote set-head origin --auto
  OPT_BRANCH=$(git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/@@')
fi
OPT_BRANCH=${OPT_BRANCH:-develop}
readingLocal=true
OPT_VERBOSE=
OPT_ONLY_BRANCH=
OPT_ONLY_LOCAL=
OPT_ONLY_REMOTE=
OPT_ORIGIN=origin
thisBranch=$(git rev-parse --abbrev-ref HEAD)

while [ -n "$1" ]; do
  case "$1" in
    -v | --verbose) OPT_VERBOSE=true ;;
    -b | --branch) OPT_ONLY_BRANCH=$2; shift ;;
    -r | --remote) OPT_ONLY_REMOTE=true ;;
    -o | --origin) OPT_ORIGIN=$2; shift ;;
    -l | --local) OPT_ONLY_LOCAL=true ;;
    -h | --help) echo "$USAGE"; exit 0 ;;
    *)
      if [ $# == 1 ]; then
        OPT_BRANCH="$1"
        shift
      else
        echo "Unknown option '$1'"
        echo "$USAGE"
        exit 1
      fi
    ;;
  esac
  shift
done

declare -A allBranches
declare -A localBranches
declare -A remoteBranches
declare -A onlyLocal
declare -A onlyRemote
declare -A localAndRemote
longestName=0

matches=($(git branch -a |sed 's/\*\?\ \+//g' | grep -v -- '->' |grep "\b${OPT_BRANCH}\b"))

if [ ${#matches[@]} == 0 ]; then
  echo "Did not find branch: $OPT_BRANCH"
  exit 1
else
  OPT_BRANCH=${matches[0]}
fi

while read branch; do
  allBranches["$branch"]="$branch"
  shortName="${branch/remotes\/$OPT_ORIGIN\//}"

  if [[ $branch =~ remotes/$OPT_ORIGIN/HEAD ]]; then
    readingLocal=
    continue
  fi

  if [[ $branch =~ remotes/ ]]; then
    readingLocal=
  fi

  if [ ${#shortName} -gt $longestName ]; then
    longestName=${#shortName}
  fi

  if [ "$readingLocal" == "true" ]; then
    localBranches["$branch"]="$branch"
    onlyLocal["$branch"]="$branch"
  else
    remoteBranches[$shortName]="$branch"
    if [ -n "${onlyLocal[$shortName]}" ]; then
      onlyLocal[$shortName]=
      localAndRemote[$shortName]="$shortName"
    else
      onlyRemote[$shortName]="$branch"
    fi
  fi
done < <(git branch -a |sed 's/^[\*\ ]\ //g')

if [ -n "$OPT_ONLY_BRANCH" ]; then
  if [ -n "${allBranches[$OPT_ONLY_BRANCH]}" ]; then
    echo "${allBranches[$OPT_ONLY_BRANCH]}"
    OPT_ONLY_BRANCH=${allBranches[$OPT_ONLY_BRANCH]}
  else
    echo "${allBranches[$OPT_BRANCH]}"
    OPT_BRANCH=${allBranches[$OPT_BRANCH]}
  fi
fi

if [ -z "$OPT_ONLY_BRANCH" ]; then
  if [ -n "$OPT_ONLY_LOCAL" ]; then
    echo ${onlyLocal[@]}
    exit 0
  elif [ -n "$OPT_ONLY_REMOTE" ]; then
    echo ${remoteBranches[@]}
    exit 0
  fi
  if [ "$TERM" == dumb ]; then
    printf "Only Local  Only Remote\n\n"
  else
    printf "\e[1;36mOnly Local  \e[0;33mOnly Remote\e[0m\n\n"
  fi
  while read branch; do
    doCompare "$branch"
  done < <(git branch -a --sort=-committerdate |sed 's/^[\*\ ]\ //g')
  # done < <(git branch -a --sort=-committerdate |sed 's/^[\*\ ]\ //g' |grep -v 'no branch\|detached')
else
  doCompare $OPT_BRANCH
fi
