#!/bin/bash

# Basic scheduling program
working_dir=~/miscnotes
mkdir -p $working_dir/config
config_file="$working_dir/config/mnotes.conf"
if [ ! -f $config_file ]; then
  echo Error: Could not initialize: $working_dir/config/mnotes.conf not found.
  # new config
  echo -ne "Create one now (y/n)? "
  read input
  cc=
  cf=
  while [ "$input" == "y" ] || [ "$input" == "Y" ]; do
    echo -ne "Enter course(s) (eg course1|course)\n> "
    read input
    cc=$cc" $input"
    echo -ne "Enter filename (eg courseFile1)\n> "
    read input
    cf=$cf" $input"
    echo -ne "Add another course (y/n)?\n> "
    read input
  done
  if [ "$cc" == "" ] && [ "$cf" == "" ]; then
    exit 2
  else
    echo "courses=\"${cc/ /}\"" >$working_dir/config/mnotes.conf
    echo "files=\"${cf/ /}\"" >>$working_dir/config/mnotes.conf
    echo -ne "Done.\n$(cat $working_dir/config/mnotes.conf)\n"
    exit 1
  fi
fi
source $working_dir/config/mnotes.conf
mkdir -p $working_dir/deleted
#---make clean option - delete and re-init
cd $working_dir

# Parameter pulling
operation="$1"
course="$2"
args="$3"
shift 
shift
message="$*"
shift
addargs="$*"

# Course selection for in/output file
touch $files
conf_courses=" $courses "
conf_search="\<$course\>"

if [ "$course" == "" ]; then
  file=
else
  pos=$(($(echo $conf_courses |sed "s/[^ ]*$conf_search.*//g" |wc -w) + 1))
  file=$(echo $files |cut -d' ' -f$pos)
fi

usage="\
Usage: $(basename $0) -acCDfhpPrzRu [-o [-c/N]] [COURSE] [ARGS] [ADDARGS]
 -a, --add COURSE ARGS
      append ADDARGS to first line containing ARGS in COURSE
 -c, --clear COURSE ARGS
      delete first line containing ARGS from COURSE, temporarily
      storing it in working_dir/deleted/lastline
 -D, --del COURSE
      delete COURSE file, temporarily storing it in working_dir/deleted/
 -f, --find ARGS
      print file lines containing ARGS
 -h, --help
      show this menu
 -l, --list
      print all files
 -p, --push COURSE ARGS
      append ARGS to COURSE
 -P, --pull COURSE
      read from COURSE or print all with no COURSE
 -r, --rep COURSE ARGS ADDARGS
      replace first occurence of ARGS with ADDARGS
 -z, --repl COURSE ARGS ADDARGS
      same as -r, but relplaces the whole line
 -R, --rest COURSE 
      swap deleted COURSE file with one in working_dir/deleted
 -o, --sort [N] [-c]
      print file lines in order containing todays date + N days
      (default 7). Use -o -c to print calendar
 -u, --undo COURSE
      append most recently cleared line to COURSE
 -C, --conf
      print config settings
"
#echo $course $file $message
#exit 1
# Operation selection
case "$operation" in
  "--push" | "-p")
  #  Push - Sends input to text file
  #  Requires input ($message), file ($course => $file) 
    if [ "$file" != "" ] && [ "$message" != "" ] && [ "$course" != "" ]; then
      echo "$message" >> $file
      echo Added \'$message\' to $file
      bash $0 --pull $course
    else
      echo Invalid format
      bash $0
    fi
    ;;
  "--pull" | "-P")
  #  Pull - Prints contents of a file or of all files (with no params)
  #  Requires (optional) file to read from ($course => $file)
    if [ "$file" == "" ]; then
      bash $0 list
    else
      if [ -f $working_dir/$file ]; then
        echo \> $(basename $file)
        cat $file
      else
        echo File \'$file\' not found
      fi
    fi
    ;;
  "-D" | "--del")
  #  Delete - Removes entire contents of input file and replaces with empty one.
  #+ Stores file in deleted/ until next deletion operation.
  #  Requires input file ($course => $file)
    if [ "$file" != "" ]; then
      echo -n "Really delete $file? [Y/n]: "
      read confirm
      if [ "$confirm" == "y" ] || [ "$confirm" == "Y" ]; then
        mv $file deleted/
        touch $file
        echo Sent $file\
        to $working_dir/deleted/$file
        bash $0 list
      fi
    else
      echo Invalid format
      bash $0
    fi
    ;;
  "--clear" | "-c")
  #  Clear - Removes a single line from file, determined by the first string
  #+ containing input substring
  #  Requires input file ($course => $file) and substring ($message)
    if [ "$message" != "" ] && [ "$file" != "" ]; then
      cat $file |grep -m 1 "$message" >$working_dir/deleted/lastline &&
      sed -i /"$(grep -m 1 "$message" $file)"/d $file &&
      echo Deleted \'$(cat $working_dir/deleted/lastline)\'\
      from $file &&
      bash $0 --pull $course ||
      echo String \'$message\' not found
    else
      echo Invalid format
      bash $0
    fi
    ;;
  "--add" | "-a")
  #  Append - Appends a string onto existing line in text file
  #  Requires input file ($course => $file), substring to search for ($args),
  #+ string to append ($addargs)"
    if [ "$args" != "" ] && [ "$file" != "" ] && [ "$addargs" != "" ]; then
      if $(grep -qm 1 $args $file); then
        sed -i s/"$(grep -m 1 $args $file)"/"$(grep -m 1 $args $file)$addargs"/g $file
        echo Appended \'"$addargs"\' to\
        $file: $args
        bash $0 --pull $course
      else
        echo Could not find \'$args\'
      fi
    else
      echo Invalid format
      bash $0
    fi
    ;;
  "--list" | "-l")
  # List - Prints contents of text files in working directory
    find . -maxdepth 1 -type f -exec echo -n "> " \; -exec basename {} \; -exec cat {} \;
    ;;
  "--undo" | "-u")
  #  Undo - restores last deleted line to a file
  #  Requires input file ($course ==> $file) 
    if [ "$file" != "" ]; then
      if $(grep -q . $working_dir/deleted/lastline); then
        cat $working_dir/deleted/lastline >> $file
        echo Appended \'$(cat $working_dir/deleted/lastline)\'\
        to $file
        bash $0 --pull $course
      else
        echo Last line does not exist
      fi
    else
      bash $0
    fi
    ;;
  "--rest" | "-R")
  # Restore - Replaces text file in deleted/, swapping it with existing one in working directory
  # Requires input file ($course => $file)
    if [ "$file" != "" ]; then
      if [ -f $working_dir/deleted/$file ]; then
        mv $working_dir/deleted/$file $working_dir/tmp
        if [ -f $working_dir/$file ]; then
          mv $working_dir/$file $working_dir/deleted/
        fi
        mv $working_dir/tmp $working_dir/$file
        echo Restored $file
        bash $0 --pull $course
      else
        echo Could not restore $file: does not exist
      fi
    else
      bash $0
    fi
    ;;
  "--rep" | "-r" | "-z" | "--repl")
  #  Replace - Replaces a single word or line in input file with another one
  #  Requires input file ($course => $file), substring to replace ($args),
  #+ replacement string ($addargs)
    if [ "$args" != "" ] && [ "$file" != "" ] && [ "$addargs" != "" ]; then
      if $(grep -qm 1 "$args" $file); then
        matched_str=$(grep -m 1 "$args" $file)
        echo $matched_str > $working_dir/deleted/lastline
        if [ "$operation" == "rep" ] || [ "$operation" == "-r" ]; then
          replacement=${matched_str/"$args"/"$addargs"}
        else
          replacement="$addargs"
        fi
        sed -i s/"$matched_str"/"$replacement"/g $file
        echo Changed $file: \'$matched_str\' \
        to \'$replacement\'
        bash $0 --pull $course
      else
        echo Unable to locate \'$args\'
      fi
    else
      bash $0
    fi
    ;;
  "--find" | "-f")
  # Find - Seaches files for matching string
  # Requires string to search for ($course)
    if [ "$course" != "" ]; then
      find $working_dir -maxdepth 1 -type f \( -exec grep -q "$course" {} \; -exec echo -n "> " \; -exec basename {} \; -exec grep "$course" {} \; \)
    else
      echo Missing argument\(s\)
      bash $0
    fi
    ;;
  "--sort" | "-o")
  # Sort - Prints file lines containing dates ranging from todays date +[0,24] in order
  # Requires (optional) number of days to iterate through and search for ($course)
    week_days="[M,T,W,R,F,S,U]"
    d=$(date +%-d)
    m=$(date +%-m)
    y=$(date +%Y)
    nm=$(($m % 12 + 1))
    ny=$(($y + ($m + 1) / 12))
    short_m=$(cal |egrep -o [A-Z][a-z]\{2\} |tr [A-Z] [a-z])
    short_nm=$(cal $nm $ny |egrep -o [A-Z][a-z]\{2\} |tr [A-Z] [a-z])
    if [ "$course" == "-c" ]; then
      length=24
      cal >thisMonth
      cal $nm $ny >nextMonth
      if [ $d -lt 10 ]; then
        replace="-- "
      else
        replace=" -- "
      fi
      sed -i s/\ $d$/"$replace"/g thisMonth
      sed -i s/\ $d\ /"$replace"/g thisMonth
			sed -i s/^$d\ /--\ /g thisMonth
    elif [ "$course" == "" ] || [ "$course" -gt "24" ] || [ "$course" -lt "0" ]; then
      length=7
    else
      length=$course
    fi
    days_this_month=$(cal |egrep -v [a-z] |wc -w)
    for i in $files; do
      echo "> $(basename $i)" >>tmp
      cat $i >>$working_dir/tmp
    done
    end_day=$(( ($d - 1 + $length) % days_this_month + 1 ))
    end_month=$nm
    echo Showing date range: $short_m $d - $short_nm $end_day
    for ((i = $d; i <= (( $d + $length )); i++)); do
      $(egrep -q $week_days$short_m[0-9]\{1,2\}$\|$week_days$short_nm[0-9]\{1,2\}$ tmp) || break
      if [ $i -gt $days_this_month ]; then
        day=$(( $i - $days_this_month ))
        calMonth=nextMonth
        currMonth=$short_nm
      else
        day=$i
        calMonth=thisMonth
        currMonth=$short_m
      fi
      for file in $files; do
        if $(egrep -q $week_days$currMonth$day$ $file); then
          echo  "> $(basename $file)"
          egrep $week_days$currMonth$day$ $file |tee del
          while read line; do
            sed -i /"$line"/d $working_dir/tmp
          done <del
          rm del
          if [ "$course" == "-c" ]; then
            if [ "$day" -lt "10" ]; then
              replace="xx "
            else
              replace=" xx "
            fi
            cat $calMonth |sed s/\ $day$/"$replace"/g |sed s/\ $day\ /"$replace"/g >calTmp
						sed -i s/^$day\ /xx\ /g calTmp
						mv calTmp $calMonth
          fi
        fi
      done
    done
    lastline=
    while read line; do
      if $(echo $line |grep -q \>) && $(echo $lastline |grep -q \>); then
        sed -i "/$lastline/d" tmp 
      fi
      lastline=$line
    done <tmp 
    if $(echo $lastline |grep -q \>); then
      sed -i "/$lastline/d" tmp 
    fi
    echo
    if $(grep -q . tmp); then
      echo Unmatched:
      cat tmp
      echo
    fi
    rm tmp
    if [ "$course" == "-c" ]; then
      cat thisMonth |sed '$ d'
      cat nextMonth
      rm thisMonth nextMonth
    fi
    ;;
  "--conf" | "-C")
  # Conf - Prints config settings
    i=1
    j=$(echo $files |wc -w)
    while [ $i -le $j ]; do
      [ $i == 1 ] || echo
      cf=$(echo $files |cut -d' ' -f$i)
      cc=$(echo $courses |cut -d' ' -f$i)
      echo -ne "$cc -> $cf"

      (( i++ ))
    done
    echo
  ;;
  "--help" | "-h")
  # Help - Prints info on operation usage
    echo "$usage"
  ;;
  # Default - Prints minimal usage information
  *)
    echo "Usage: $(basename $0) -acCDfhpPrzRu [-o [-c/N]] [COURSE] [ARGS] [ADDARGS]"
    echo "Type mnotes -h or mnotes --help for more info"
  ;;
esac

# music|songs|m -> songs
# games|g -> games
# tv|shows|t -> shows
# other|misc|o -> misc
# groceries|shop|s -> shop