#!/bin/bash

# Turn on debugging
# set -xv

resultsFile=~/tmp/api.log
tmpfile=/tmp/api.temp-file
mkdir -p ~/tmp

usage="Usage: $(basename $0) OPTIONS [URL]

Sends an HTTP request through curl to api server

options:
  -X, --request METHOD        Use METHOD request (eg PUT, DELETE)
  get, post, delete, put,     Shortcuts for -X METHOD
  head, options

  -u, --url URL               Append URL to saved baseUrl
  -b, --base-url BASEURL      Use BASEURL as the base url for this request only
  -w, --fullurl URL           Use full url (not appending to base url)

  -d, --data DATA             Supply payload data (JSON string or file)
  -F, --form-data DATA        Supply payload data (form data key=value pairs)
  -L [USERNAME[:PASSWORD]]    Pass USERNAME and PASSWORD as data
  -o, --options OPTS          Options to pass through to curl
  -O, --output FILE           If successful, save output to FILE (pdf, image, ...)
  -r, --raw                   Output raw data to term

  -H, --header HEADER         Add HEADER to request (append to defaults)
  -a, --use-auth              Send auth header with request
  -p, --hide-password         Don't store password (saved as <password>)
  -R, --reauth                Make a re-authentication request

  Saving default data:
  -k, --auth-key KEY          Set the auth header key
  -t, --auth-token TOKEN      Set the data field to search for in the
                              reauthentication request
  -B, --save-url BASEURL      Save BASEURL for this and subsequent requests
  -l USERNAME[:PASSWORD]      Save USERNAME and PASSWORD data
  -j, --save-headers HEADERS  Set default HEADERS
  -J, --only-headers HEADERS  Use HEADERS for this request only (keeps auth)
  -A, --auth-url URL          Set authentication url
  -C, --config                Update defaults and print without making a request
  -c, --cookie                Set cookie header

  -v, --verbose               Output more
  -S, --show-saved            Prints out stored request data
  -h, --help                  Show this menu
"

if [ -z "$*" ]; then
  echo "$usage"
  exit 1
fi

# defaults
dryRun=false
fullURL=false
reauth=false
savePassword=true
saveUrl=false
setDefaultHeaders=false
headerOverride=false
useAuth=false
verbose=false
headers=
url=
output=

# Extract saved fields from this file (this actually just saves line numbers
# for use with sed later). The order must match the variables below
authHeaderKeyLine=$(($(grep -n -m2 'HEADERLINE' $0 |tail -n1 |cut -d':' -f1) + 1))
authHeaderLine=$(($authHeaderKeyLine + 1))
userHeaderLine=$(($authHeaderKeyLine + 2))
urlHeaderLine=$(($authHeaderKeyLine + 3))
reauthUrlLine=$(($authHeaderKeyLine + 4))
dataTokenStringLine=$(($authHeaderKeyLine + 5))
defaultHeadersLine=$(($authHeaderKeyLine + 6))
cookieHeaderLine=$(($authHeaderKeyLine + 7))

# These values are replaced by the script any time data is saved - make sure
# they never span more than 1 line, as that will mess with the replacements
# and / or script execution
# HEADERLINE - keep this above the 'authHeaderKey' line
authHeaderKey="Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.jwtpayload.5jnhoe8wP4vdNXHcY21X75RHXjiSN_PSrVZLn2O-8NM"
authHeader="${authHeaderKey}eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.jwtpayload.M-IQ7HOXh3Y4c_VNZf1yeLae9XtlMBYyKVM3EXHMOyI"
userHeader="admin@example.dev:password"
urlHeader="https://app.example.io/api/"
reauthUrl="api.test/graphql"
dataTokenString="accessToken"
defaultHeaders=""
cookieHeader=""

username=$(echo $userHeader |cut -d':' -f1)
password=$(echo $userHeader |cut -d':' -f2)

while [ ! -z "$1" ]; do
  case $1 in
    -v | --verbose)
      verbose=true
    ;;

    -a | --use-auth)
      useAuth=true
    ;;

    -A | --auth-url)
      shift
      reauthUrl="$1"
    ;;

    -k | --auth-key)
      shift
      authHeaderKey="$1"
    ;;

    -t | --auth-token)
      shift
      dataTokenString="$1"
    ;;

    -H | --header)
      shift
      if [[ "$1" =~ -H ]]; then
        headers="$1 $headers"
      else
        headers="-H '$1' $headers"
      fi
    ;;

    -c | --cookie)
      shift
      if [ -n "$1" ]; then
        if [[ "$1" =~ -H ]]; then
          cookieHeader="$1"
        else
          cookieHeader="-H '$1'"
        fi
      else
        cookieHeader=
      fi
      sed -i "$cookieHeaderLine s|.*|cookieHeader=\"${cookieHeader}\"|g" $0
    ;;

    -J | --only-header)
      shift
      if [ -n "$1" ]; then
        if [[ "$1" =~ -H ]]; then
          allHeaders="$1"
        else
          allHeaders="-H '$1'"
        fi
      else
        allHeaders=
      fi
      headerOverride=true
    ;;

    -j | --save-headers)
      shift
      if [ -n "$1" ]; then
        if [[ "$1" =~ -H ]]; then
          headers="$1"
        else
          headers="-H '$1'"
        fi
      else
        headers=
      fi
      setDefaultHeaders=true
    ;;

    -b | --base-url)
      shift
      baseUrl="$1"
    ;;

    -B | --save-url)
      saveUrl=true
      shift
      baseUrl="$1"
      urlHeader="$baseUrl"
    ;;

    -d | --data)
      shift
      if [ -f "$1" ]; then
        data="@$1"
        # tmp=$(sed 's|//.*||g' "$1")
        # tmp=$(cat "$1")
      else
        tmp="$1"
      fi
      if [ -z "$data" ]; then
        data="$tmp"
      else
        # If there is already data being passed in, merge it together
        data="$(echo "$data" |sed "s|}|,$(echo "$tmp" |sed "s|[{}]||g")}|g" )"
      fi
    ;;

    -F | --form-data)
      shift
      curlOptions=$curlOptions\ -F\ $1
    ;;

    -o | --options)
      shift
      curlOptions=$curlOptions\ $1
    ;;

    -O | --output)
      shift
      output=$1
    ;;

    -r | --raw)
      raw=true
    ;;

    -u | --url)
      shift
      url="$1"
    ;;

    -w | --fullurl)
      shift
      url="$1"
      fullURL=true
    ;;

    -X | --request)
      shift
      method="${1^^}"
    ;;

    get | post | delete | put | head | options)
      method="${1^^}"
    ;;

    -C | --config)
      dryRun=true
    ;;

    -S | --show-saved)
      echo "Base Url              : $urlHeader"
      echo "Login Details         : $userHeader"
      echo "Auth Token Header Key : $authHeaderKey"
      echo "Auth Header           : $authHeader"
      echo "Reauth Url            : $reauthUrl"
      echo "Auth Token Data Key   : $dataTokenString"
      echo "Default Headers       : $defaultHeaders"
      echo "Cookie                : $cookieHeader"
      exit 0
    ;;

    -p | --hide-password)
      savePassword=false
    ;;

    -l | -L)
      username=$(echo $2 |cut -d':' -f1)
      temp=$(echo $2 |cut -d':' -f2)
      if [ ! -z $temp ]; then
        password=$temp
      fi

      if [ "$1" == "-L" ]; then
        if [ -z "$data" ]; then
          data="{\"username\":\"$username\",\"password\":\"password\"}"
        else
          data=$(echo "$data" |sed "s|}|,\"username\":\"$username\",\"password\":\"password\"}|g" )
        fi
      fi
      userHeader="$username:$password"
      shift
    ;;

    -R | --reauth)
      reauth=true
    ;;

    -h | --help)
      echo "$usage"
      exit 0
    ;;

    *)
      if [ "${1:0:1}" == "-" ]; then
        echo "Error: invalid option - '$1'"
        exit 1
      fi
      url="$1"
    ;;
  esac

  shift
done

rm -f $resultsFile

if [ -z "$baseUrl" ]; then
  baseUrl="${urlHeader}"
elif $saveUrl; then
  sed -i "$urlHeaderLine s|\"[^\"]\+\"|\"$baseUrl\"|g" $0
fi

if $savePassword; then
  sed -i "$userHeaderLine s|.*|userHeader=\"$username:$password\"|g" $0
else
  sed -i "$userHeaderLine s|.*|userHeader=\"$username:<password>\"|g" $0
fi

if $setDefaultHeaders; then
  sed -i "$defaultHeadersLine s|.*|defaultHeaders=\"$headers\"|g" $0
  defaultHeaders="$headers"
fi

sed -i "$authHeaderKeyLine s|.*|authHeaderKey=\"$authHeaderKey\"|g" $0
sed -i "$dataTokenStringLine s|.*|dataTokenString=\"$dataTokenString\"|g" $0
sed -i "$reauthUrlLine s|.*|reauthUrl=\"$reauthUrl\"|g" $0
authHeader="${authHeaderKey}${authHeader/$authHeaderKey/}"

if $dryRun; then
  echo "Base Url              : $urlHeader"
  echo "Login Details         : $userHeader"
  echo "Auth Token Header Key : $authHeaderKey"
  echo "Auth Header           : $authHeader"
  echo "Reauth Url            : $reauthUrl"
  echo "Auth Token Data Key   : $dataTokenString"
  echo "Default Headers       : $defaultHeaders"
  echo "Cookie                : $cookieHeader"
  exit 0
fi

if $reauth; then
  if [ -z "$data" ]; then
    # TODO: make email/password variable
    data='{"email":"'$username'","password":"'$password'"}'
  fi
  $verbose && echo "curl -H \"content-type: application/json\" -d'$data' ${reauthUrl}"
  result=$({ curl -vvv -H "Content-Type: application/json" -d"$data" ${reauthUrl}; } 2>$resultsFile)
  echo $result >>$resultsFile

  # Searches JSON response for "<dataTokenString>" : "<dataTokenValue>""
  regex="${dataTokenString}"'"[ ]*:[ ]*"([^"]+)"'
  if [[ "$result" =~ $regex ]]; then
    token=${BASH_REMATCH[1]}
    sed -i "$authHeaderLine s|authHeader.*|authHeader=\"\${authHeaderKey}$token\"|g" $0
  else
    # Look for Set-Cookie headers in the response
    cookieRegex='[Ss]et-[Cc]ookie:\ ([^;]+)'
    responseSetCookie="$(grep -io 'Set-Cookie: [^;]\+' $resultsFile)"
    if [[ $responseSetCookie =~ $cookieRegex ]]; then
      sed -i "$cookieHeaderLine s|.*|cookieHeader=\"-H 'Cookie: ${BASH_REMATCH[1]}'\"|g" $0
      echo "Api sent 'set-cookie' ${BASH_REMATCH[1]}"
      exit 0
    else
      (echo "$result" | python -m json.tool 2>/dev/null || echo "$result") |tee -a $resultsFile
      exit 1
    fi
  fi
  echo -e "Authenticated as $username:\n$token"
  exit 0
fi

if ! $fullURL; then
  path="/$url"
  path="${path//\/\//\/}"
  url="${baseUrl}$path"
fi

if [ -z "$method" ]; then
  echo "No method provided - using POST"
  method="POST"
fi

if [ -z "$allHeaders" ] && ! $headerOverride; then
  allHeaders="${headers} ${defaultHeaders} ${allHeaders} ${cookieHeader}"
  allHeaders="$(echo ${allHeaders//  / })"
fi

if $useAuth; then
  allHeaders="-H '$authHeader'"
fi


if ! [ -z "$data" ]; then
  data="-d'$data'"
  json='[{}]'
  if [[ $data =~ $json ]] && ! [[ $allHeaders =~ json ]]; then
    allHeaders="-H 'Content-Type: application/json' $allHeaders"
  elif [[ $data =~ @.*\.json ]]; then
    allHeaders="-H 'Content-Type: application/json' $allHeaders"
  fi
fi

toRun=$(echo "curl -vvv -X$method $allHeaders $data $curlOptions '$url'" |sed 's/\ \+/\ /g')
if $verbose; then
  echo "$toRun" |tee -a $resultsFile
else
  echo "$toRun" > $resultsFile
fi

echo >> $resultsFile

eval "$toRun" 1> $tmpfile 2>> $resultsFile
cat $tmpfile >> $resultsFile

# Look for Set-Cookie headers in the response
cookieRegex='[Ss]et-[Cc]ookie:\ ([^;]+)'
responseSetCookie="$(grep -io 'Set-Cookie: [^;]\+' $resultsFile)"
if [[ $responseSetCookie =~ $cookieRegex ]]; then
  sed -i "$cookieHeaderLine s|.*|cookieHeader=\"-H 'Cookie: ${BASH_REMATCH[1]}'\"|g" $0
fi

$verbose && grep '^[<>\*]' $resultsFile
if ! [ -s $tmpfile ]; then
  cat $resultsFile
  exit 1
fi

if [ -z "$output" ]; then
  contentType="$(grep -io 'Content-Type: [^;]\+' $resultsFile)"
  if [[ $contentType =~ application.json ]] && [ -z "$raw" ]; then
    (cat $tmpfile | python -m json.tool 2>/dev/null || cat $tmpfile) |tee -a $resultsFile
  else
    cat $tmpfile
  fi
  rm -f $tmpfile
else
  mv $tmpfile $output
fi

